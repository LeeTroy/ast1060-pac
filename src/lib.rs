#![doc = "Peripheral access API for AST1060 microcontrollers (generated using svd2rust v0.36.1 (4052ce6 2025-04-04))\n\nYou can find an overview of the generated API [here].\n\nAPI features to be included in the [next] svd2rust release can be generated by cloning the svd2rust [repository], checking out the above commit, and running `cargo doc --open`.\n\n[here]: https://docs.rs/svd2rust/0.36.1/svd2rust/#peripheral-api\n[next]: https://github.com/rust-embedded/svd2rust/blob/master/CHANGELOG.md#unreleased\n[repository]: https://github.com/rust-embedded/svd2rust"]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![no_std]
#![cfg_attr(docsrs, feature(doc_auto_cfg))]
#[doc = r"Number available in the NVIC for configuring priority"]
pub const NVIC_PRIO_BITS: u8 = 4;
#[allow(unused_imports)]
use generic::*;
#[doc = r"Common register and bit access and modify traits"]
pub mod generic;
#[cfg(feature = "rt")]
extern "C" {
    fn hace();
    fn uart();
    fn gpio();
    fn scu();
    fn wdt();
    fn fmc();
    fn sgpiom();
    fn uartdma();
    fn spi();
    fn spi1();
    fn spipf1();
    fn spipf2();
    fn spipf3();
    fn i3c();
    fn i3c1();
    fn i3c2();
    fn i3c3();
    fn i2c();
    fn i2c1();
    fn i2c2();
    fn i2c3();
    fn i2c4();
    fn i2c5();
    fn i2c6();
    fn i2c7();
    fn i2c8();
    fn i2c9();
    fn i2c10();
    fn i2c11();
    fn i2c12();
    fn i2c13();
    fn i2cfilter();
}
#[doc(hidden)]
#[repr(C)]
pub union Vector {
    _handler: unsafe extern "C" fn(),
    _reserved: u32,
}
#[cfg(feature = "rt")]
#[doc(hidden)]
#[link_section = ".vector_table.interrupts"]
#[no_mangle]
pub static __INTERRUPTS: [Vector; 128] = [
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: hace },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: uart },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: gpio },
    Vector { _handler: scu },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: wdt },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: fmc },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: sgpiom },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: uartdma },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: spi },
    Vector { _handler: spi1 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: spipf1 },
    Vector { _handler: spipf2 },
    Vector { _handler: spipf3 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: i3c },
    Vector { _handler: i3c1 },
    Vector { _handler: i3c2 },
    Vector { _handler: i3c3 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: i2c },
    Vector { _handler: i2c1 },
    Vector { _handler: i2c2 },
    Vector { _handler: i2c3 },
    Vector { _handler: i2c4 },
    Vector { _handler: i2c5 },
    Vector { _handler: i2c6 },
    Vector { _handler: i2c7 },
    Vector { _handler: i2c8 },
    Vector { _handler: i2c9 },
    Vector { _handler: i2c10 },
    Vector { _handler: i2c11 },
    Vector { _handler: i2c12 },
    Vector { _handler: i2c13 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector {
        _handler: i2cfilter,
    },
];
#[doc = r"Enumeration of all the interrupts."]
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
#[repr(u16)]
pub enum Interrupt {
    #[doc = "4 - hace"]
    hace = 4,
    #[doc = "8 - uart"]
    uart = 8,
    #[doc = "11 - gpio"]
    gpio = 11,
    #[doc = "12 - scu"]
    scu = 12,
    #[doc = "24 - wdt"]
    wdt = 24,
    #[doc = "39 - fmc"]
    fmc = 39,
    #[doc = "51 - sgpiom"]
    sgpiom = 51,
    #[doc = "56 - uartdma"]
    uartdma = 56,
    #[doc = "65 - spi"]
    spi = 65,
    #[doc = "66 - spi1"]
    spi1 = 66,
    #[doc = "88 - spipf1"]
    spipf1 = 88,
    #[doc = "89 - spipf2"]
    spipf2 = 89,
    #[doc = "90 - spipf3"]
    spipf3 = 90,
    #[doc = "102 - i3c"]
    i3c = 102,
    #[doc = "103 - i3c1"]
    i3c1 = 103,
    #[doc = "104 - i3c2"]
    i3c2 = 104,
    #[doc = "105 - i3c3"]
    i3c3 = 105,
    #[doc = "110 - i2c"]
    i2c = 110,
    #[doc = "111 - i2c1"]
    i2c1 = 111,
    #[doc = "112 - i2c2"]
    i2c2 = 112,
    #[doc = "113 - i2c3"]
    i2c3 = 113,
    #[doc = "114 - i2c4"]
    i2c4 = 114,
    #[doc = "115 - i2c5"]
    i2c5 = 115,
    #[doc = "116 - i2c6"]
    i2c6 = 116,
    #[doc = "117 - i2c7"]
    i2c7 = 117,
    #[doc = "118 - i2c8"]
    i2c8 = 118,
    #[doc = "119 - i2c9"]
    i2c9 = 119,
    #[doc = "120 - i2c10"]
    i2c10 = 120,
    #[doc = "121 - i2c11"]
    i2c11 = 121,
    #[doc = "122 - i2c12"]
    i2c12 = 122,
    #[doc = "123 - i2c13"]
    i2c13 = 123,
    #[doc = "127 - i2cfilter"]
    i2cfilter = 127,
}
unsafe impl cortex_m::interrupt::InterruptNumber for Interrupt {
    #[inline(always)]
    fn number(self) -> u16 {
        self as u16
    }
}
#[doc = "spi"]
pub type Spi = crate::Periph<spi::RegisterBlock, 0x7e63_0000>;
impl core::fmt::Debug for Spi {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Spi").finish()
    }
}
#[doc = "spi"]
pub mod spi;
#[doc = "spi interface"]
pub type Spi1 = crate::Periph<spi::RegisterBlock, 0x7e64_0000>;
impl core::fmt::Debug for Spi1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Spi1").finish()
    }
}
#[doc = "spi interface"]
pub use self::spi as other_spi1;
#[doc = "i3cglobal"]
pub type I3cglobal = crate::Periph<i3cglobal::RegisterBlock, 0x7e7a_0000>;
impl core::fmt::Debug for I3cglobal {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I3cglobal").finish()
    }
}
#[doc = "i3cglobal"]
pub mod i3cglobal;
#[doc = "i3c"]
pub type I3c = crate::Periph<i3c::RegisterBlock, 0x7e7a_2000>;
impl core::fmt::Debug for I3c {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I3c").finish()
    }
}
#[doc = "i3c"]
pub mod i3c;
#[doc = "i3c interface"]
pub type I3c1 = crate::Periph<i3c::RegisterBlock, 0x7e7a_3000>;
impl core::fmt::Debug for I3c1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I3c1").finish()
    }
}
#[doc = "i3c interface"]
pub use self::i3c as other_i3c1;
#[doc = "i3c interface"]
pub type I3c2 = crate::Periph<i3c::RegisterBlock, 0x7e7a_4000>;
impl core::fmt::Debug for I3c2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I3c2").finish()
    }
}
#[doc = "i3c interface"]
pub use self::i3c as other_i3c2;
#[doc = "i3c interface"]
pub type I3c3 = crate::Periph<i3c::RegisterBlock, 0x7e7a_5000>;
impl core::fmt::Debug for I3c3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I3c3").finish()
    }
}
#[doc = "i3c interface"]
pub use self::i3c as other_i3c3;
#[doc = "gpio"]
pub type Gpio = crate::Periph<gpio::RegisterBlock, 0x7e78_0000>;
impl core::fmt::Debug for Gpio {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpio").finish()
    }
}
#[doc = "gpio"]
pub mod gpio;
#[doc = "sgpiom"]
pub type Sgpiom = crate::Periph<sgpiom::RegisterBlock, 0x7e78_0500>;
impl core::fmt::Debug for Sgpiom {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Sgpiom").finish()
    }
}
#[doc = "sgpiom"]
pub mod sgpiom;
#[doc = "scu"]
pub type Scu = crate::Periph<scu::RegisterBlock, 0x7e6e_2000>;
impl core::fmt::Debug for Scu {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Scu").finish()
    }
}
#[doc = "scu"]
pub mod scu;
#[doc = "uart"]
pub type Uart = crate::Periph<uart::RegisterBlock, 0x7e78_4000>;
impl core::fmt::Debug for Uart {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Uart").finish()
    }
}
#[doc = "uart"]
pub mod uart;
#[doc = "uartdma"]
pub type Uartdma = crate::Periph<uartdma::RegisterBlock, 0x7e79_e000>;
impl core::fmt::Debug for Uartdma {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Uartdma").finish()
    }
}
#[doc = "uartdma"]
pub mod uartdma;
#[doc = "i2c"]
pub type I2c = crate::Periph<i2c::RegisterBlock, 0x7e7b_0080>;
impl core::fmt::Debug for I2c {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2c").finish()
    }
}
#[doc = "i2c"]
pub mod i2c;
#[doc = "i2c interface"]
pub type I2c1 = crate::Periph<i2c::RegisterBlock, 0x7e7b_0100>;
impl core::fmt::Debug for I2c1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2c1").finish()
    }
}
#[doc = "i2c interface"]
pub use self::i2c as other_i2c1;
#[doc = "i2c interface"]
pub type I2c2 = crate::Periph<i2c::RegisterBlock, 0x7e7b_0180>;
impl core::fmt::Debug for I2c2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2c2").finish()
    }
}
#[doc = "i2c interface"]
pub use self::i2c as other_i2c2;
#[doc = "i2c interface"]
pub type I2c3 = crate::Periph<i2c::RegisterBlock, 0x7e7b_0200>;
impl core::fmt::Debug for I2c3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2c3").finish()
    }
}
#[doc = "i2c interface"]
pub use self::i2c as other_i2c3;
#[doc = "i2c interface"]
pub type I2c4 = crate::Periph<i2c::RegisterBlock, 0x7e7b_0280>;
impl core::fmt::Debug for I2c4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2c4").finish()
    }
}
#[doc = "i2c interface"]
pub use self::i2c as other_i2c4;
#[doc = "i2c interface"]
pub type I2c5 = crate::Periph<i2c::RegisterBlock, 0x7e7b_0300>;
impl core::fmt::Debug for I2c5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2c5").finish()
    }
}
#[doc = "i2c interface"]
pub use self::i2c as other_i2c5;
#[doc = "i2c interface"]
pub type I2c6 = crate::Periph<i2c::RegisterBlock, 0x7e7b_0380>;
impl core::fmt::Debug for I2c6 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2c6").finish()
    }
}
#[doc = "i2c interface"]
pub use self::i2c as other_i2c6;
#[doc = "i2c interface"]
pub type I2c7 = crate::Periph<i2c::RegisterBlock, 0x7e7b_0400>;
impl core::fmt::Debug for I2c7 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2c7").finish()
    }
}
#[doc = "i2c interface"]
pub use self::i2c as other_i2c7;
#[doc = "i2c interface"]
pub type I2c8 = crate::Periph<i2c::RegisterBlock, 0x7e7b_0480>;
impl core::fmt::Debug for I2c8 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2c8").finish()
    }
}
#[doc = "i2c interface"]
pub use self::i2c as other_i2c8;
#[doc = "i2c interface"]
pub type I2c9 = crate::Periph<i2c::RegisterBlock, 0x7e7b_0500>;
impl core::fmt::Debug for I2c9 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2c9").finish()
    }
}
#[doc = "i2c interface"]
pub use self::i2c as other_i2c9;
#[doc = "i2c interface"]
pub type I2c10 = crate::Periph<i2c::RegisterBlock, 0x7e7b_0580>;
impl core::fmt::Debug for I2c10 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2c10").finish()
    }
}
#[doc = "i2c interface"]
pub use self::i2c as other_i2c10;
#[doc = "i2c interface"]
pub type I2c11 = crate::Periph<i2c::RegisterBlock, 0x7e7b_0600>;
impl core::fmt::Debug for I2c11 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2c11").finish()
    }
}
#[doc = "i2c interface"]
pub use self::i2c as other_i2c11;
#[doc = "i2c interface"]
pub type I2c12 = crate::Periph<i2c::RegisterBlock, 0x7e7b_0680>;
impl core::fmt::Debug for I2c12 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2c12").finish()
    }
}
#[doc = "i2c interface"]
pub use self::i2c as other_i2c12;
#[doc = "i2c interface"]
pub type I2c13 = crate::Periph<i2c::RegisterBlock, 0x7e7b_0700>;
impl core::fmt::Debug for I2c13 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2c13").finish()
    }
}
#[doc = "i2c interface"]
pub use self::i2c as other_i2c13;
#[doc = "i2cglobal"]
pub type I2cglobal = crate::Periph<i2cglobal::RegisterBlock, 0x7e7b_0000>;
impl core::fmt::Debug for I2cglobal {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2cglobal").finish()
    }
}
#[doc = "i2cglobal"]
pub mod i2cglobal;
#[doc = "hace"]
pub type Hace = crate::Periph<hace::RegisterBlock, 0x7e6d_0000>;
impl core::fmt::Debug for Hace {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Hace").finish()
    }
}
#[doc = "hace"]
pub mod hace;
#[doc = "secure"]
pub type Secure = crate::Periph<secure::RegisterBlock, 0x7e6f_2000>;
impl core::fmt::Debug for Secure {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Secure").finish()
    }
}
#[doc = "secure"]
pub mod secure;
#[doc = "i2cfilter"]
pub type I2cfilter = crate::Periph<i2cfilter::RegisterBlock, 0x7e7b_2000>;
impl core::fmt::Debug for I2cfilter {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2cfilter").finish()
    }
}
#[doc = "i2cfilter"]
pub mod i2cfilter;
#[doc = "i2c_filter_thr"]
pub type I2cFilterThr = crate::Periph<i2c_filter_thr::RegisterBlock, 0x7e7b_2200>;
impl core::fmt::Debug for I2cFilterThr {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2cFilterThr").finish()
    }
}
#[doc = "i2c_filter_thr"]
pub mod i2c_filter_thr;
#[doc = "i2c_filter_thr interface"]
pub type I2cFilterThr1 = crate::Periph<i2c_filter_thr::RegisterBlock, 0x7e7b_2300>;
impl core::fmt::Debug for I2cFilterThr1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2cFilterThr1").finish()
    }
}
#[doc = "i2c_filter_thr interface"]
pub use self::i2c_filter_thr as i2c_filter_thr1;
#[doc = "i2c_filter_thr interface"]
pub type I2cFilterThr2 = crate::Periph<i2c_filter_thr::RegisterBlock, 0x7e7b_2400>;
impl core::fmt::Debug for I2cFilterThr2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2cFilterThr2").finish()
    }
}
#[doc = "i2c_filter_thr interface"]
pub use self::i2c_filter_thr as i2c_filter_thr2;
#[doc = "i2c_filter_thr interface"]
pub type I2cFilterThr3 = crate::Periph<i2c_filter_thr::RegisterBlock, 0x7e7b_2500>;
impl core::fmt::Debug for I2cFilterThr3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2cFilterThr3").finish()
    }
}
#[doc = "i2c_filter_thr interface"]
pub use self::i2c_filter_thr as i2c_filter_thr3;
#[doc = "spipf"]
pub type Spipf = crate::Periph<spipf::RegisterBlock, 0x7e79_1000>;
impl core::fmt::Debug for Spipf {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Spipf").finish()
    }
}
#[doc = "spipf"]
pub mod spipf;
#[doc = "spipf interface"]
pub type Spipf1 = crate::Periph<spipf::RegisterBlock, 0x7e79_2000>;
impl core::fmt::Debug for Spipf1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Spipf1").finish()
    }
}
#[doc = "spipf interface"]
pub use self::spipf as spipf1;
#[doc = "spipf interface"]
pub type Spipf2 = crate::Periph<spipf::RegisterBlock, 0x7e79_3000>;
impl core::fmt::Debug for Spipf2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Spipf2").finish()
    }
}
#[doc = "spipf interface"]
pub use self::spipf as spipf2;
#[doc = "spipf interface"]
pub type Spipf3 = crate::Periph<spipf::RegisterBlock, 0x7e79_4000>;
impl core::fmt::Debug for Spipf3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Spipf3").finish()
    }
}
#[doc = "spipf interface"]
pub use self::spipf as spipf3;
#[doc = "wdt"]
pub type Wdt = crate::Periph<wdt::RegisterBlock, 0x7e78_5000>;
impl core::fmt::Debug for Wdt {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Wdt").finish()
    }
}
#[doc = "wdt"]
pub mod wdt;
#[doc = "wdt interface"]
pub type Wdt1 = crate::Periph<wdt::RegisterBlock, 0x7e78_5080>;
impl core::fmt::Debug for Wdt1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Wdt1").finish()
    }
}
#[doc = "wdt interface"]
pub use self::wdt as wdt1;
#[doc = "wdt interface"]
pub type Wdt2 = crate::Periph<wdt::RegisterBlock, 0x7e78_5100>;
impl core::fmt::Debug for Wdt2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Wdt2").finish()
    }
}
#[doc = "wdt interface"]
pub use self::wdt as wdt2;
#[doc = "wdt interface"]
pub type Wdt3 = crate::Periph<wdt::RegisterBlock, 0x7e78_5180>;
impl core::fmt::Debug for Wdt3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Wdt3").finish()
    }
}
#[doc = "wdt interface"]
pub use self::wdt as wdt3;
#[doc = "fmc"]
pub type Fmc = crate::Periph<fmc::RegisterBlock, 0x7e62_0000>;
impl core::fmt::Debug for Fmc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Fmc").finish()
    }
}
#[doc = "fmc"]
pub mod fmc;
#[no_mangle]
static mut DEVICE_PERIPHERALS: bool = false;
#[doc = r" All the peripherals."]
#[allow(non_snake_case)]
pub struct Peripherals {
    #[doc = "spi"]
    pub spi: Spi,
    #[doc = "spi1"]
    pub spi1: Spi1,
    #[doc = "i3cglobal"]
    pub i3cglobal: I3cglobal,
    #[doc = "i3c"]
    pub i3c: I3c,
    #[doc = "i3c1"]
    pub i3c1: I3c1,
    #[doc = "i3c2"]
    pub i3c2: I3c2,
    #[doc = "i3c3"]
    pub i3c3: I3c3,
    #[doc = "gpio"]
    pub gpio: Gpio,
    #[doc = "sgpiom"]
    pub sgpiom: Sgpiom,
    #[doc = "scu"]
    pub scu: Scu,
    #[doc = "uart"]
    pub uart: Uart,
    #[doc = "uartdma"]
    pub uartdma: Uartdma,
    #[doc = "i2c"]
    pub i2c: I2c,
    #[doc = "i2c1"]
    pub i2c1: I2c1,
    #[doc = "i2c2"]
    pub i2c2: I2c2,
    #[doc = "i2c3"]
    pub i2c3: I2c3,
    #[doc = "i2c4"]
    pub i2c4: I2c4,
    #[doc = "i2c5"]
    pub i2c5: I2c5,
    #[doc = "i2c6"]
    pub i2c6: I2c6,
    #[doc = "i2c7"]
    pub i2c7: I2c7,
    #[doc = "i2c8"]
    pub i2c8: I2c8,
    #[doc = "i2c9"]
    pub i2c9: I2c9,
    #[doc = "i2c10"]
    pub i2c10: I2c10,
    #[doc = "i2c11"]
    pub i2c11: I2c11,
    #[doc = "i2c12"]
    pub i2c12: I2c12,
    #[doc = "i2c13"]
    pub i2c13: I2c13,
    #[doc = "i2cglobal"]
    pub i2cglobal: I2cglobal,
    #[doc = "hace"]
    pub hace: Hace,
    #[doc = "secure"]
    pub secure: Secure,
    #[doc = "i2cfilter"]
    pub i2cfilter: I2cfilter,
    #[doc = "i2c_filter_thr"]
    pub i2c_filter_thr: I2cFilterThr,
    #[doc = "i2c_filter_thr1"]
    pub i2c_filter_thr1: I2cFilterThr1,
    #[doc = "i2c_filter_thr2"]
    pub i2c_filter_thr2: I2cFilterThr2,
    #[doc = "i2c_filter_thr3"]
    pub i2c_filter_thr3: I2cFilterThr3,
    #[doc = "spipf"]
    pub spipf: Spipf,
    #[doc = "spipf1"]
    pub spipf1: Spipf1,
    #[doc = "spipf2"]
    pub spipf2: Spipf2,
    #[doc = "spipf3"]
    pub spipf3: Spipf3,
    #[doc = "wdt"]
    pub wdt: Wdt,
    #[doc = "wdt1"]
    pub wdt1: Wdt1,
    #[doc = "wdt2"]
    pub wdt2: Wdt2,
    #[doc = "wdt3"]
    pub wdt3: Wdt3,
    #[doc = "fmc"]
    pub fmc: Fmc,
}
impl Peripherals {
    #[doc = r" Returns all the peripherals *once*."]
    #[cfg(feature = "critical-section")]
    #[inline]
    pub fn take() -> Option<Self> {
        critical_section::with(|_| {
            if unsafe { DEVICE_PERIPHERALS } {
                return None;
            }
            Some(unsafe { Peripherals::steal() })
        })
    }
    #[doc = r" Unchecked version of `Peripherals::take`."]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Each of the returned peripherals must be used at most once."]
    #[inline]
    pub unsafe fn steal() -> Self {
        DEVICE_PERIPHERALS = true;
        Peripherals {
            spi: Spi::steal(),
            spi1: Spi1::steal(),
            i3cglobal: I3cglobal::steal(),
            i3c: I3c::steal(),
            i3c1: I3c1::steal(),
            i3c2: I3c2::steal(),
            i3c3: I3c3::steal(),
            gpio: Gpio::steal(),
            sgpiom: Sgpiom::steal(),
            scu: Scu::steal(),
            uart: Uart::steal(),
            uartdma: Uartdma::steal(),
            i2c: I2c::steal(),
            i2c1: I2c1::steal(),
            i2c2: I2c2::steal(),
            i2c3: I2c3::steal(),
            i2c4: I2c4::steal(),
            i2c5: I2c5::steal(),
            i2c6: I2c6::steal(),
            i2c7: I2c7::steal(),
            i2c8: I2c8::steal(),
            i2c9: I2c9::steal(),
            i2c10: I2c10::steal(),
            i2c11: I2c11::steal(),
            i2c12: I2c12::steal(),
            i2c13: I2c13::steal(),
            i2cglobal: I2cglobal::steal(),
            hace: Hace::steal(),
            secure: Secure::steal(),
            i2cfilter: I2cfilter::steal(),
            i2c_filter_thr: I2cFilterThr::steal(),
            i2c_filter_thr1: I2cFilterThr1::steal(),
            i2c_filter_thr2: I2cFilterThr2::steal(),
            i2c_filter_thr3: I2cFilterThr3::steal(),
            spipf: Spipf::steal(),
            spipf1: Spipf1::steal(),
            spipf2: Spipf2::steal(),
            spipf3: Spipf3::steal(),
            wdt: Wdt::steal(),
            wdt1: Wdt1::steal(),
            wdt2: Wdt2::steal(),
            wdt3: Wdt3::steal(),
            fmc: Fmc::steal(),
        }
    }
}
